#!/bin/bash
echo "[START: isbn_unified.sh] $(date '+%Y-%m-%d %H:%M:%S')" >&2

# Script unifi√© de gestion ISBN - Version 4 MARTINGALE COMPL√àTE MODULAIRE
# Fichier principal qui charge les modules

# D√©finir le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Charger les configurations et fonctions
source config/settings.sh
source lib/safe_functions.sh
source lib/isbn_functions.sh
source lib/isbn_display.sh
source lib/isbn_collect.sh
source lib/isbn_process.sh
source lib/database.sh
source lib/commercial_description.sh

# Charger la biblioth√®que martingale compl√®te
source "$SCRIPT_DIR/martingale_complete.sh"

# D√©finir les couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Variables pour les param√®tres
PARAM_ISBN=""
PARAM_ACTION=""
FORCE_MODE=0
GENERATE_COMMERCIAL=1  # Par d√©faut, on g√©n√®re la description commerciale
GENERATE_NEGOTIATION=0  # Par d√©faut, on ne g√©n√®re pas le message de n√©gociation

# Fonction d'aide
show_help() {
    cat << EOF
${BOLD}${CYAN}üìö Script unifi√© de gestion ISBN - Version 4 MARTINGALE${NC}

${BOLD}Usage:${NC}
    $0 [ISBN] [OPTIONS]
    $0 -action [ACTION] [PARAMS]

${BOLD}Options de traitement individuel:${NC}
    ${GREEN}ISBN${NC}                  Traiter un ISBN sp√©cifique
    ${GREEN}-force${NC}                Forcer la collecte m√™me si les donn√©es existent
    ${GREEN}-nocommercial${NC}         Ne pas g√©n√©rer la description commerciale
    ${GREEN}-negotiation${NC}          G√©n√©rer aussi le message de n√©gociation

${BOLD}Actions disponibles:${NC}
    ${GREEN}-action bulk${NC}          Traiter plusieurs ISBN depuis la base
    ${GREEN}-action missing${NC}       Traiter les livres sans description
    ${GREEN}-action incomplete${NC}    Traiter les livres avec donn√©es incompl√®tes
    ${GREEN}-action martingale${NC}    Afficher le tableau martingale d'un livre
    ${GREEN}-action verify [ISBN]${NC} V√©rifier la compl√©tude d'un livre

${BOLD}Exemples:${NC}
    ${CYAN}$0 9782070360024${NC}              # Traiter un ISBN
    ${CYAN}$0 9782070360024 -force${NC}       # Forcer la mise √† jour
    ${CYAN}$0 -action bulk${NC}               # Traiter plusieurs livres
    ${CYAN}$0 -action martingale 9782070360024${NC}  # Voir la martingale

${BOLD}${PURPLE}Fonctionnalit√©s:${NC}
    ‚úì Collecte via 3 APIs (Google Books, ISBNdb, Open Library)
    ‚úì Enrichissement automatique (martingale compl√®te)
    ‚úì Recherche d'√©ditions si pas de description
    ‚úì Cat√©gorisation IA automatique
    ‚úì G√©n√©ration description commerciale
    ‚úì Export multi-marketplace ready

EOF
}

# Parser les arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -action)
            PARAM_ACTION="$2"
            shift 2
            ;;
        -force)
            FORCE_MODE=1
            shift
            ;;
        -nocommercial)
            GENERATE_COMMERCIAL=0
            shift
            ;;
        -negotiation)
            GENERATE_NEGOTIATION=1
            shift
            ;;
        *)
            if [ -z "$PARAM_ISBN" ]; then
                PARAM_ISBN="$1"
            fi
            shift
            ;;
    esac
done

# Fonction pour chercher d'autres √©ditions quand pas de description
find_editions_for_description() {
    local post_id="$1"
    local isbn="$2"
    
    echo "[DEBUG] Recherche d'√©ditions pour r√©cup√©rer une description" >&2
    
    # R√©cup√©rer titre et auteur
    local book_info=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT 
            p.post_title,
            (SELECT meta_value FROM wp_${SITE_ID}_postmeta WHERE post_id = p.ID AND meta_key = '_best_authors' LIMIT 1)
        FROM wp_${SITE_ID}_posts p
        WHERE p.ID = $post_id
        LIMIT 1" 2>/dev/null)
    
    if [ -z "$book_info" ]; then
        echo "[ERROR] Livre non trouv√©" >&2
        return 1
    fi
    
    IFS=$'\t' read -r title authors <<< "$book_info"
    
    # Nettoyer pour la recherche
    local search_title=$(echo "$title" | sed 's/[[:punct:]]//g' | cut -d' ' -f1-4)
    local search_author=$(echo "$authors" | cut -d',' -f1 | sed 's/[[:punct:]]//g')
    local search_query=$(echo "$search_title+$search_author" | sed 's/ /+/g')
    
    echo -e "${YELLOW}üîé Recherche d'autres √©ditions : $search_query${NC}"
    
    # Recherche Google Books
    local response=$(curl -s "https://www.googleapis.com/books/v1/volumes?q=$search_query&maxResults=40&key=$GOOGLE_BOOKS_API_KEY")
    
    # Trouver la meilleure description
    local best_desc=$(echo "$response" | jq -r '.items[]? | 
        select(.volumeInfo.description != null) |
        select(.volumeInfo.title | test("'"${title:0:20}"'"; "i")) |
        select(.volumeInfo.authors[0] | test("'"$search_author"'"; "i")) |
        {desc: .volumeInfo.description, date: .volumeInfo.publishedDate, length: (.volumeInfo.description | length)} |
        "\(.date)|\(.length)|\(.desc)"' 2>/dev/null | sort -t'|' -k2 -nr | head -1 | cut -d'|' -f3)
    
    if [ -n "$best_desc" ] && [ ${#best_desc} -gt 100 ]; then
        echo -e "${GREEN}‚úÖ Description trouv√©e dans une autre √©dition (${#best_desc} caract√®res)${NC}"
        
        # Sauvegarder
        safe_store_meta "$post_id" "_best_description" "$best_desc"
        safe_store_meta "$post_id" "_best_description_source" "google_editions_auto"
        
        # Mettre √† jour le post content aussi
        local safe_desc=$(safe_sql "$best_desc")
        mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -e "
            UPDATE wp_${SITE_ID}_posts 
            SET post_content = '$safe_desc'
            WHERE ID = $post_id" 2>/dev/null
        
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucune description trouv√©e dans d'autres √©ditions${NC}"
        return 1
    fi
}

# Fonction pour g√©n√©rer la description commerciale
generate_commercial_description_for_book() {
    local post_id="$1"
    local isbn="$2"
    
    echo "[DEBUG] G√©n√©ration description commerciale pour post_id=$post_id, isbn=$isbn" >&2
    
    # V√©rifier si commercial_desc.sh existe
    if [ ! -f "$SCRIPT_DIR/commercial_desc.sh" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Script commercial_desc.sh non trouv√©${NC}"
        return 1
    fi
    
    # V√©rifier si la cl√© API Claude est configur√©e
    if [ -z "$CLAUDE_API_KEY" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Cl√© API Claude non configur√©e${NC}"
        return 1
    fi
    
    # V√©rifier si une description commerciale existe d√©j√† (sauf si force)
    if [ $FORCE_MODE -eq 0 ]; then
        local existing_commercial=$(get_meta_value "$post_id" "_commercial_description")
        if [ -n "$existing_commercial" ] && [ "$existing_commercial" != "NULL" ]; then
            echo -e "${CYAN}‚ÑπÔ∏è  Description commerciale existe d√©j√†${NC}"
            return 0
        fi
    fi
    
    echo ""
    echo -e "${BOLD}${CYAN}üõçÔ∏è  G√âN√âRATION DESCRIPTION COMMERCIALE...${NC}"
    
    # G√©n√©rer et sauvegarder directement
    if ./commercial_desc.sh "$isbn" -save -quiet >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Description commerciale g√©n√©r√©e et sauvegard√©e${NC}"
        
        # Attendre un peu pour la sauvegarde
        sleep 1
        
        # R√©cup√©rer et afficher la description
        commercial_desc=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
            SELECT meta_value FROM wp_${SITE_ID}_postmeta 
            WHERE post_id = '$post_id' AND meta_key = '_commercial_description' 
            LIMIT 1" 2>/dev/null)
        
        if [ -n "$commercial_desc" ] && [ "$commercial_desc" != "NULL" ]; then
            echo ""
            echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
            echo -e "${BOLD}${CYAN}üì¢ DESCRIPTION COMMERCIALE G√âN√âR√âE :${NC}"
            echo ""
            echo -e "${CYAN}$commercial_desc${NC}"
            echo ""
            echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
            echo -e "${BOLD}üìä Statistiques :${NC}"
            echo -e "   ‚Ä¢ Longueur : ${GREEN}${#commercial_desc} caract√®res${NC}"
            echo -e "   ‚Ä¢ Mots : ${GREEN}$(echo "$commercial_desc" | wc -w) mots${NC}"
        fi
        
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Description commerciale non g√©n√©r√©e (donn√©es insuffisantes)${NC}"
        return 1
    fi
}

# Fonction pour g√©n√©rer le message de n√©gociation
generate_negotiation_message() {
    local post_id="$1"
    local isbn="$2"
    
    echo "[DEBUG] G√©n√©ration message de n√©gociation pour post_id=$post_id, isbn=$isbn" >&2
    
    # R√©cup√©rer les infos n√©cessaires
    local book_info=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT 
            p.post_title,
            (SELECT meta_value FROM wp_${SITE_ID}_postmeta WHERE post_id = p.ID AND meta_key = '_best_authors' LIMIT 1),
            (SELECT meta_value FROM wp_${SITE_ID}_postmeta WHERE post_id = p.ID AND meta_key = '_price' LIMIT 1)
        FROM wp_${SITE_ID}_posts p
        WHERE p.ID = $post_id
        LIMIT 1" 2>/dev/null)
    
    IFS=$'\t' read -r title authors price <<< "$book_info"
    
    # Calculer le prix r√©duit
    local reduced_price=$((price - 2))
    
    echo ""
    echo -e "${BOLD}${CYAN}üí¨ G√âN√âRATION MESSAGE N√âGOCIATION...${NC}"
    
    # Appel √† Claude
    local negotiation_msg=$(curl -s -X POST https://api.anthropic.com/v1/messages \
        -H "Content-Type: application/json" \
        -H "x-api-key: $CLAUDE_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -d '{
            "model": "claude-3-haiku-20240307",
            "max_tokens": 250,
            "messages": [
                {
                    "role": "user",
                    "content": "Tu es un vendeur expert en psychologie de vente sur Leboncoin/Vinted. Un acheteur n√©gocie sur '"$title"' de '"$authors"' que je vends '"$price"'‚Ç¨. Il propose '"$reduced_price"'‚Ç¨.\n\n√âcris une r√©ponse de VENDEUR MALIN qui :\n\n1. NE PARLE JAMAIS des prix des concurrents\n2. NE DIT PAS qu'\''il y a d'\''autres acheteurs (argument faible)\n3. VALORISE SUBTILEMENT l'\''expertise unique de l'\''auteur DIFF√âREMMENT de la description commerciale\n4. Cr√©e une CONNEXION √âMOTIONNELLE (\"ce livre va vous transformer\", \"vous allez d√©couvrir\", etc.)\n5. Utilise la RARET√â psychologique (\"exemplaire particuli√®rement soign√©\", \"√©dition recherch√©e\")\n6. ANCRE la valeur (\"pour moins qu'\''un restaurant, vous avez 1060 pages de sagesse\")\n7. Reste FERME sur le prix SANS √™tre d√©sagr√©able\n8. Termine EXACTEMENT par : \"Qu'\''en dites-vous ?\"\n\nTon : Amical mais professionnel, comme un libraire passionn√©.\nD√©but : \"Bonjour,\"\nMax 120 mots. Sois SUBTIL et PSYCHOLOGUE."
                }
            ]
        }' | jq -r '.content[0].text' 2>/dev/null)
    
    if [ -n "$negotiation_msg" ] && [ "$negotiation_msg" != "null" ]; then
        echo -e "${GREEN}‚úÖ Message de n√©gociation g√©n√©r√©${NC}"
        
        # Sauvegarder
        safe_store_meta "$post_id" "_negotiation_message" "$negotiation_msg"
        
        echo ""
        echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        echo -e "${BOLD}${CYAN}üí¨ MESSAGE DE N√âGOCIATION :${NC}"
        echo ""
        echo -e "${CYAN}$negotiation_msg${NC}"
        echo ""
        echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        echo -e "${BOLD}üìä Longueur : ${GREEN}${#negotiation_msg} caract√®res${NC}"
        
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Erreur g√©n√©ration message n√©gociation${NC}"
        return 1
    fi
}

# Fonction pour cat√©goriser avec l'IA
categorize_book_with_ai() {
    local post_id="$1"
    local isbn="$2"
    
    echo "[DEBUG] Tentative de cat√©gorisation IA pour post_id=$post_id, isbn=$isbn" >&2
    
    # V√©rifier si une cat√©gorie existe d√©j√†
    local existing_category=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT t.name 
        FROM wp_${SITE_ID}_term_relationships tr
        JOIN wp_${SITE_ID}_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        JOIN wp_${SITE_ID}_terms t ON tt.term_id = t.term_id
        WHERE tr.object_id = $post_id 
        AND tt.taxonomy = 'product_cat'
        AND t.term_id != (SELECT term_id FROM wp_${SITE_ID}_terms WHERE slug = 'uncategorized')
        LIMIT 1" 2>/dev/null)
    
    if [ -n "$existing_category" ] && [ $FORCE_MODE -eq 0 ]; then
        echo ""
        echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        echo -e "${BOLD}${CYAN}üè∑Ô∏è  CAT√âGORIE WORDPRESS EXISTANTE :${NC}"
        echo -e "   ${GREEN}‚úÖ $existing_category${NC}"
        echo -e "${BOLD}${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        return 0
    fi
    
    # Lancer la cat√©gorisation
    if [ -f "$SCRIPT_DIR/smart_categorize_dual_ai.sh" ]; then
        echo -e "${CYAN}ü§ñ Cat√©gorisation en cours...${NC}"
        "$SCRIPT_DIR/smart_categorize_dual_ai.sh" "$isbn" 2>/dev/null
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de cat√©gorisation non trouv√©${NC}"
    fi
}

# Fonction pour traiter en masse
process_bulk_books() {
    echo -e "${CYAN}üìä Recherche des livres √† traiter...${NC}"
    
    # R√©cup√©rer les ISBN sans description
    local isbns=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT DISTINCT pm1.meta_value
        FROM wp_${SITE_ID}_postmeta pm1
        LEFT JOIN wp_${SITE_ID}_postmeta pm2 ON pm1.post_id = pm2.post_id 
            AND pm2.meta_key = '_best_description'
        WHERE pm1.meta_key = '_isbn'
        AND pm1.meta_value != ''
        AND (pm2.meta_value IS NULL OR pm2.meta_value = '' OR pm2.meta_value LIKE 'Description non disponible%')
        LIMIT 10" 2>/dev/null)
    
    local count=$(echo "$isbns" | wc -l)
    echo -e "${GREEN}‚úì $count livres √† traiter${NC}"
    echo ""
    
    # Traiter chaque ISBN
    local i=1
    while IFS= read -r isbn; do
        if [ -n "$isbn" ]; then
            echo -e "${BOLD}${BLUE}[$i/$count] Traitement de : $isbn${NC}"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            
            process_single_isbn "$isbn"
            
            echo ""
            echo ""
            ((i++))
            
            # Pause entre les traitements
            sleep 2
        fi
    done <<< "$isbns"
    
    echo -e "${GREEN}‚úÖ Traitement en masse termin√©${NC}"
}

# Fonction pour traiter les livres sans description
process_books_without_description() {
    echo -e "${CYAN}üìä Recherche des livres sans description...${NC}"
    
    local isbns=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT DISTINCT pm1.meta_value
        FROM wp_${SITE_ID}_postmeta pm1
        LEFT JOIN wp_${SITE_ID}_postmeta pm2 ON pm1.post_id = pm2.post_id 
            AND pm2.meta_key = '_best_description'
        WHERE pm1.meta_key = '_isbn'
        AND pm1.meta_value != ''
        AND (pm2.meta_value IS NULL OR pm2.meta_value = '' OR LENGTH(pm2.meta_value) < 50)
        ORDER BY pm1.post_id DESC
        LIMIT 20" 2>/dev/null)
    
    local count=$(echo "$isbns" | wc -l)
    echo -e "${GREEN}‚úì $count livres sans description trouv√©s${NC}"
    echo ""
    
    local i=1
    while IFS= read -r isbn; do
        if [ -n "$isbn" ]; then
            echo -e "${BOLD}${BLUE}[$i/$count] ISBN : $isbn${NC}"
            process_single_isbn "$isbn"
            echo ""
            ((i++))
            sleep 1
        fi
    done <<< "$isbns"
}

# Fonction pour traiter les livres incomplets
process_incomplete_books() {
    echo -e "${CYAN}üìä Recherche des livres avec donn√©es incompl√®tes...${NC}"
    
    # Requ√™te pour trouver les livres avec peu de m√©tadonn√©es
    local isbns=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" -sN -e "
        SELECT pm.meta_value, COUNT(pm2.meta_key) as meta_count
        FROM wp_${SITE_ID}_postmeta pm
        LEFT JOIN wp_${SITE_ID}_postmeta pm2 ON pm.post_id = pm2.post_id
        WHERE pm.meta_key = '_isbn'
        AND pm.meta_value != ''
        GROUP BY pm.post_id, pm.meta_value
        HAVING meta_count < 50
        ORDER BY meta_count ASC
        LIMIT 15" 2>/dev/null | cut -f1)
    
    local count=$(echo "$isbns" | wc -l)
    echo -e "${GREEN}‚úì $count livres incomplets trouv√©s${NC}"
    echo ""
    
    local i=1
    while IFS= read -r isbn; do
        if [ -n "$isbn" ]; then
            echo -e "${BOLD}${BLUE}[$i/$count] ISBN : $isbn${NC}"
            process_single_isbn "$isbn" -force
            echo ""
            ((i++))
            sleep 1
        fi
    done <<< "$isbns"
}

# Fonction pour v√©rifier la compl√©tude d'un livre
verify_book_completeness() {
    local isbn="$1"
    local post_id=$(get_post_id_by_isbn "$isbn")
    
    if [ -z "$post_id" ]; then
        echo -e "${RED}‚ùå ISBN non trouv√© : $isbn${NC}"
        return 1
    fi
    
    echo -e "${BOLD}${CYAN}üìä V√âRIFICATION DE COMPL√âTUDE${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # Afficher la martingale
    display_martingale_complete "$post_id" "$isbn"
    
    # V√©rifier les champs critiques
    echo ""
    echo -e "${BOLD}${BLUE}üîç ANALYSE DES DONN√âES MANQUANTES :${NC}"
    
    local missing=0
    
    # V√©rifier description
    local desc=$(get_meta_value "$post_id" "_best_description")
    if [ -z "$desc" ] || [ ${#desc} -lt 50 ]; then
        echo -e "${RED}‚ùå Description manquante ou trop courte${NC}"
        ((missing++))
    fi
    
    # V√©rifier image
    local image=$(get_meta_value "$post_id" "_best_cover_image")
    if [ -z "$image" ]; then
        echo -e "${RED}‚ùå Image de couverture manquante${NC}"
        ((missing++))
    fi
    
    # V√©rifier prix
    local price=$(get_meta_value "$post_id" "_price")
    if [ -z "$price" ] || [ "$price" = "0" ]; then
        echo -e "${RED}‚ùå Prix non d√©fini${NC}"
        ((missing++))
    fi
    
    # V√©rifier description commerciale
    local commercial=$(get_meta_value "$post_id" "_commercial_description")
    if [ -z "$commercial" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Description commerciale non g√©n√©r√©e${NC}"
        ((missing++))
    fi
    
    if [ $missing -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Toutes les donn√©es sont compl√®tes !${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $missing donn√©es manquantes${NC}"
        echo ""
        echo -e "${CYAN}üí° Pour compl√©ter : $0 $isbn -force${NC}"
    fi
}

# Fonction pour traiter un ISBN individuel
process_single_isbn() {
    local isbn="$1"
    
    # Valider l'ISBN
    local clean_isbn=$(validate_isbn "$isbn")
    if [ -z "$clean_isbn" ]; then
        echo -e "${RED}‚ùå ISBN invalide : $isbn${NC}"
        return 1
    fi
    
    # V√©rifier si le livre existe
    local post_id=$(get_post_id_by_isbn "$clean_isbn")
    
    if [ -n "$post_id" ]; then
        echo -e "${GREEN}‚úì Livre trouv√© (ID: $post_id)${NC}"
        
        # V√©rifier si on force la mise √† jour
        if [ $FORCE_MODE -eq 0 ]; then
            local has_data=$(check_book_has_data "$post_id")
            if [ "$has_data" = "1" ]; then
                echo -e "${CYAN}‚ÑπÔ∏è  Le livre a d√©j√† des donn√©es. Utilisez -force pour mettre √† jour.${NC}"
                
                # Afficher quand m√™me la martingale
                echo ""
                display_martingale_complete "$post_id" "$clean_isbn"
                
                # G√©n√©rer la description commerciale si manquante
                if [ $GENERATE_COMMERCIAL -eq 1 ]; then
                    generate_commercial_description_for_book "$post_id" "$clean_isbn"
                fi
                
                return 0
            fi
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Livre non trouv√© dans la base${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è  Ajout du livre...${NC}"
        
        # Ajouter le livre
        post_id=$(add_book_to_wordpress "$clean_isbn")
        if [ -z "$post_id" ]; then
            echo -e "${RED}‚ùå Erreur lors de l'ajout du livre${NC}"
            return 1
        fi
        echo -e "${GREEN}‚úì Livre ajout√© (ID: $post_id)${NC}"
    fi
    
    # Collecter les donn√©es
    echo ""
    echo -e "${BOLD}${BLUE}üì° COLLECTE DES DONN√âES...${NC}"
    
    # Appeler chaque API
    echo -e "${CYAN}‚Üí Google Books...${NC}"
    collect_google_books "$post_id" "$clean_isbn"
    
    echo -e "${CYAN}‚Üí ISBNdb...${NC}"
    collect_isbndb "$post_id" "$clean_isbn"
    
    echo -e "${CYAN}‚Üí Open Library...${NC}"
    collect_open_library "$post_id" "$clean_isbn"
    
    # Traiter et enrichir les donn√©es avec la martingale compl√®te
    echo ""
    echo -e "${BOLD}${PURPLE}üé∞ ENRICHISSEMENT MARTINGALE...${NC}"
    local process_status=0
    if ! enrich_metadata_complete "$post_id" "$clean_isbn"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Enrichissement partiel${NC}"
        process_status=1
    fi
    
    # V√©rifier si on a une description, sinon chercher dans d'autres √©ditions
    local description=$(get_meta_value "$post_id" "_best_description")
    if [ -z "$description" ] || [ ${#description} -lt 50 ] || [[ "$description" == "Description non disponible"* ]]; then
        echo ""
        echo -e "${BOLD}${YELLOW}üîç RECHERCHE D'AUTRES √âDITIONS...${NC}"
        find_editions_for_description "$post_id" "$clean_isbn"
    fi
    
    # Afficher les r√©sultats de la martingale compl√®te
    echo ""
    display_martingale_complete "$post_id" "$clean_isbn"
    
    # Appeler la cat√©gorisation IA si configur√©e
    if [ -f "$SCRIPT_DIR/smart_categorize_dual_ai.sh" ]; then
        echo ""
        echo -e "${BOLD}${CYAN}ü§ñ CAT√âGORISATION IA...${NC}"
        if [ -n "$GEMINI_API_KEY" ] || [ -n "$CLAUDE_API_KEY" ]; then
            categorize_book_with_ai "$post_id" "$clean_isbn"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  APIs IA non configur√©es${NC}"
        fi
    fi
    
    # G√©n√©rer la description commerciale
    if [ $GENERATE_COMMERCIAL -eq 1 ] && [ $process_status -eq 0 ]; then
        generate_commercial_description_for_book "$post_id" "$clean_isbn"
    fi
    
    # G√©n√©rer le message de n√©gociation si demand√©
    if [ $GENERATE_NEGOTIATION -eq 1 ] && [ $process_status -eq 0 ]; then
        generate_negotiation_message "$post_id" "$clean_isbn"
    fi
    
    return $process_status
}

# Fonction principale
main() {
    echo "[DEBUG] Mode: $PARAM_ACTION, ISBN: $PARAM_ISBN" >&2
    
    # Si pas d'action sp√©cifi√©e et pas d'ISBN, afficher l'aide
    if [ -z "$PARAM_ACTION" ] && [ -z "$PARAM_ISBN" ]; then
        show_help
        exit 0
    fi
    
    # Traiter selon l'action
    if [ -n "$PARAM_ACTION" ]; then
        case "$PARAM_ACTION" in
            bulk)
                echo -e "${BOLD}${BLUE}üìö Mode traitement en masse${NC}"
                process_bulk_books
                ;;
            missing)
                echo -e "${BOLD}${BLUE}üìö Traitement des livres sans description${NC}"
                process_books_without_description
                ;;
            incomplete)
                echo -e "${BOLD}${BLUE}üìö Traitement des livres incomplets${NC}"
                process_incomplete_books
                ;;
            martingale)
                if [ -z "$3" ]; then
                    echo -e "${RED}‚ùå ISBN requis pour afficher la martingale${NC}"
                    exit 1
                fi
                local post_id=$(get_post_id_by_isbn "$3")
                if [ -n "$post_id" ]; then
                    display_martingale_complete "$post_id" "$3"
                else
                    echo -e "${RED}‚ùå ISBN non trouv√© : $3${NC}"
                fi
                ;;
            verify)
                if [ -z "$3" ]; then
                    echo -e "${RED}‚ùå ISBN requis pour la v√©rification${NC}"
                    exit 1
                fi
                verify_book_completeness "$3"
                ;;
            *)
                echo -e "${RED}‚ùå Action inconnue : $PARAM_ACTION${NC}"
                show_help
                exit 1
                ;;
        esac
    else
        # Mode traitement individuel
        echo -e "${BOLD}${BLUE}üìö Mode traitement individuel${NC}"
        process_single_isbn "$PARAM_ISBN"
    fi
}

# Ex√©cuter le script principal
main

echo "[END: isbn_unified.sh] $(date '+%Y-%m-%d %H:%M:%S')" >&2